(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Parallax = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    function cubicInOut(t) {
        return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
    }
    function quadInOut(t) {
        t /= 0.5;
        if (t < 1)
            return 0.5 * t * t;
        t--;
        return -0.5 * (t * (t - 2) - 1);
    }

    function is_date(obj) {
        return Object.prototype.toString.call(obj) === '[object Date]';
    }

    function tick_spring(ctx, last_value, current_value, target_value) {
        if (typeof current_value === 'number' || is_date(current_value)) {
            // @ts-ignore
            const delta = target_value - current_value;
            // @ts-ignore
            const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
            const spring = ctx.opts.stiffness * delta;
            const damper = ctx.opts.damping * velocity;
            const acceleration = (spring - damper) * ctx.inv_mass;
            const d = (velocity + acceleration) * ctx.dt;
            if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
                return target_value; // settled
            }
            else {
                ctx.settled = false; // signal loop to keep ticking
                // @ts-ignore
                return is_date(current_value) ?
                    new Date(current_value.getTime() + d) : current_value + d;
            }
        }
        else if (Array.isArray(current_value)) {
            // @ts-ignore
            return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
        }
        else if (typeof current_value === 'object') {
            const next_value = {};
            for (const k in current_value) {
                // @ts-ignore
                next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
            }
            // @ts-ignore
            return next_value;
        }
        else {
            throw new Error(`Cannot spring ${typeof current_value} values`);
        }
    }
    function spring(value, opts = {}) {
        const store = writable(value);
        const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
        let last_time;
        let task;
        let current_token;
        let last_value = value;
        let target_value = value;
        let inv_mass = 1;
        let inv_mass_recovery_rate = 0;
        let cancel_task = false;
        function set(new_value, opts = {}) {
            target_value = new_value;
            const token = current_token = {};
            if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
                cancel_task = true; // cancel any running animation
                last_time = now();
                last_value = new_value;
                store.set(value = target_value);
                return Promise.resolve();
            }
            else if (opts.soft) {
                const rate = opts.soft === true ? .5 : +opts.soft;
                inv_mass_recovery_rate = 1 / (rate * 60);
                inv_mass = 0; // infinite mass, unaffected by spring forces
            }
            if (!task) {
                last_time = now();
                cancel_task = false;
                task = loop(now => {
                    if (cancel_task) {
                        cancel_task = false;
                        task = null;
                        return false;
                    }
                    inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
                    const ctx = {
                        inv_mass,
                        opts: spring,
                        settled: true,
                        dt: (now - last_time) * 60 / 1000
                    };
                    const next_value = tick_spring(ctx, last_value, value, target_value);
                    last_time = now;
                    last_value = value;
                    store.set(value = next_value);
                    if (ctx.settled) {
                        task = null;
                    }
                    return !ctx.settled;
                });
            }
            return new Promise(fulfil => {
                task.promise.then(() => {
                    if (token === current_token)
                        fulfil();
                });
            });
        }
        const spring = {
            set,
            update: (fn, opts) => set(fn(target_value, value), opts),
            subscribe: store.subscribe,
            stiffness,
            damping,
            precision
        };
        return spring;
    }

    function writableSet(value = new Set()) {
      const store = writable(value);

      const wrap = (method) => {
        return (...args) => {
          let output;
          store.update((value) => {
            output = value[method](...args);
            return value;
          });
          return output;
        };
      };
      return {
        ...store,
        add: wrap('add'),
        delete: wrap('delete'),
      };
    }

    const contextKey = {};

    const clamp = (val, min, max) => {
      return val < min ? min : val > max ? max : val;
    };

    // fork of https://github.com/langbamit/svelte-scrollto
    let supportsPassive = false;
    try {
      let opts = Object.defineProperty({}, 'passive', {
        get: function () {
          supportsPassive = true;
        },
      });
      window.addEventListener('test', null, opts);
    } catch (e) {}

    var _ = {
      $(selector) {
        if (typeof selector === 'string') {
          return document.querySelector(selector);
        }
        return selector;
      },
      extend(...args) {
        return Object.assign(...args);
      },
      addListeners(element, events, handler, opts = { passive: false }) {
        if (!(events instanceof Array)) {
          events = [events];
        }
        for (let i = 0; i < events.length; i++) {
          element.addEventListener(
            events[i],
            handler,
            supportsPassive ? opts : false
          );
        }
      },
      removeListeners(element, events, handler) {
        if (!(events instanceof Array)) {
          events = [events];
        }
        for (let i = 0; i < events.length; i++) {
          element.removeEventListener(events[i], handler);
        }
      },
      cumulativeOffset(element) {
        let top = 0;
        let left = 0;

        do {
          top += element.offsetTop || 0;
          left += element.offsetLeft || 0;
          element = element.offsetParent;
        } while (element);

        return {
          top: top,
          left: left,
        };
      },
      directScroll(element) {
        return element && element !== document && element !== document.body;
      },
      scrollTop(element, value) {
        let inSetter = value !== undefined;
        if (this.directScroll(element)) {
          return inSetter ? (element.scrollTop = value) : element.scrollTop;
        } else {
          return inSetter
            ? (document.documentElement.scrollTop = document.body.scrollTop = value)
            : window.pageYOffset ||
                document.documentElement.scrollTop ||
                document.body.scrollTop ||
                0;
        }
      },
      scrollLeft(element, value) {
        let inSetter = value !== undefined;
        if (this.directScroll(element)) {
          return inSetter ? (element.scrollLeft = value) : element.scrollLeft;
        } else {
          return inSetter
            ? (document.documentElement.scrollLeft = document.body.scrollLeft =
                value)
            : window.pageXOffset ||
                document.documentElement.scrollLeft ||
                document.body.scrollLeft ||
                0;
        }
      },
    };

    // fork of https://github.com/langbamit/svelte-scrollto

    const defaultOptions = {
      container: 'body',
      duration: 500,
      delay: 0,
      offset: 0,
      easing: cubicInOut,
      onStart: noop,
      onDone: noop,
      onAborting: noop,
      scrollX: false,
      scrollY: true,
    };

    const abortEvents = [
      'mousedown',
      'wheel',
      'DOMMouseScroll',
      'mousewheel',
      'keydown',
      'touchmove',
    ];

    const _scrollTo = (options) => {
      let {
        offset,
        duration,
        delay,
        easing,
        x = 0,
        y = 0,
        scrollX,
        scrollY,
        onStart,
        onDone,
        container,
        onAborting,
        element,
      } = options;

      if (typeof offset === 'function') {
        offset = offset();
      }

      const cumulativeOffsetContainer = _.cumulativeOffset(container);
      const cumulativeOffsetTarget = element
        ? _.cumulativeOffset(element)
        : { top: y, left: x };

      const initialX = _.scrollLeft(container);
      const initialY = _.scrollTop(container);

      const targetX =
        cumulativeOffsetTarget.left - cumulativeOffsetContainer.left + offset;
      const targetY =
        cumulativeOffsetTarget.top - cumulativeOffsetContainer.top + offset;

      const diffX = targetX - initialX;
      const diffY = targetY - initialY;

      let scrolling = true;
      let started = false;
      let start_time = now() + delay;
      let end_time = start_time + duration;

      function scrollToTopLeft(element, top, left) {
        if (scrollX) _.scrollLeft(element, left);
        if (scrollY) _.scrollTop(element, top);
      }

      function start(delayStart) {
        if (!delayStart) {
          started = true;
          onStart(element, { x, y });
        }
        _.addListeners(container, abortEvents, stop, { passive: true });
      }

      function tick(progress) {
        scrollToTopLeft(
          container,
          initialY + diffY * progress,
          initialX + diffX * progress
        );
      }

      function stop() {
        scrolling = false;
        _.removeListeners(container, abortEvents, stop);
      }

      loop((now) => {
        if (!started && now >= start_time) {
          start(false);
        }

        if (started && now >= end_time) {
          tick(1);
          stop();
          onDone(element, { x, y });
          return false;
        }

        if (!scrolling) {
          onAborting(element, { x, y });
          return false;
        }
        if (started) {
          const p = now - start_time;
          const t = 0 + 1 * easing(p / duration);
          tick(t);
        }

        return true;
      });

      start(delay);

      tick(0);

      return stop;
    };

    const proceedOptions = (options) => {
      let opts = _.extend({}, defaultOptions, options);
      opts.container = _.$(opts.container);
      opts.element = _.$(opts.element);
      return opts;
    };

    const scrollTo = (options) => {
      return _scrollTo(proceedOptions(options));
    };

    // focus - focusOptions - preventScroll polyfill
    (function() {
      if (
        typeof window === "undefined" ||
        typeof document === "undefined" ||
        typeof HTMLElement === "undefined"
      ) {
        return;
      }

      var supportsPreventScrollOption = false;
      try {
        var focusElem = document.createElement("div");
        focusElem.addEventListener(
          "focus",
          function(event) {
            event.preventDefault();
            event.stopPropagation();
          },
          true
        );
        focusElem.focus(
          Object.defineProperty({}, "preventScroll", {
            get: function() {
              // Edge v18 gives a false positive for supporting inputs
              if (
                navigator &&
                typeof navigator.userAgent !== 'undefined' &&
                navigator.userAgent &&
                navigator.userAgent.match(/Edge\/1[7-8]/)) {
                  return supportsPreventScrollOption = false
              }

              supportsPreventScrollOption = true;
            }
          })
        );
      } catch (e) {}

      if (
        HTMLElement.prototype.nativeFocus === undefined &&
        !supportsPreventScrollOption
      ) {
        HTMLElement.prototype.nativeFocus = HTMLElement.prototype.focus;

        var calcScrollableElements = function(element) {
          var parent = element.parentNode;
          var scrollableElements = [];
          var rootScrollingElement =
            document.scrollingElement || document.documentElement;

          while (parent && parent !== rootScrollingElement) {
            if (
              parent.offsetHeight < parent.scrollHeight ||
              parent.offsetWidth < parent.scrollWidth
            ) {
              scrollableElements.push([
                parent,
                parent.scrollTop,
                parent.scrollLeft
              ]);
            }
            parent = parent.parentNode;
          }
          parent = rootScrollingElement;
          scrollableElements.push([parent, parent.scrollTop, parent.scrollLeft]);

          return scrollableElements;
        };

        var restoreScrollPosition = function(scrollableElements) {
          for (var i = 0; i < scrollableElements.length; i++) {
            scrollableElements[i][0].scrollTop = scrollableElements[i][1];
            scrollableElements[i][0].scrollLeft = scrollableElements[i][2];
          }
          scrollableElements = [];
        };

        var patchedFocus = function(args) {
          if (args && args.preventScroll) {
            var evScrollableElements = calcScrollableElements(this);
            if (typeof setTimeout === 'function') {
              var thisElem = this;
              setTimeout(function () {
                thisElem.nativeFocus();
                restoreScrollPosition(evScrollableElements);
              }, 0);
            } else {
              this.nativeFocus();
              restoreScrollPosition(evScrollableElements);
            }
          }
          else {
            this.nativeFocus();
          }
        };

        HTMLElement.prototype.focus = patchedFocus;
      }
    })();

    /* src/Parallax.svelte generated by Svelte v3.35.0 */

    const { document: document_1, scrollTo: scrollTo_1, setTimeout: setTimeout_1, window: window_1 } = globals;

    function add_css$2() {
    	var style = element("style");
    	style.id = "svelte-15ph2c6-style";
    	style.textContent = ".parallax-container.svelte-15ph2c6{position:relative;overflow:hidden;box-sizing:border-box}";
    	append(document_1.head, style);
    }

    function create_fragment$2(ctx) {
    	let scrolling = false;

    	let clear_scrolling = () => {
    		scrolling = false;
    	};

    	let scrolling_timeout;
    	let div;
    	let div_class_value;
    	let div_style_value;
    	let current;
    	let mounted;
    	let dispose;
    	add_render_callback(/*onwindowscroll*/ ctx[26]);
    	add_render_callback(/*onwindowresize*/ ctx[27]);
    	const default_slot_template = /*#slots*/ ctx[24].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);

    	let div_levels = [
    		/*$$restProps*/ ctx[12],
    		{
    			class: div_class_value = "parallax-container " + (/*$$restProps*/ ctx[12].class
    			? /*$$restProps*/ ctx[12].class
    			: "")
    		},
    		{
    			style: div_style_value = "\n    height: " + /*$height*/ ctx[1] * /*sections*/ ctx[0] + "px;\n    " + (/*$$restProps*/ ctx[12].style
    			? /*$$restProps*/ ctx[12].style
    			: "") + ";\n  "
    		}
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			toggle_class(div, "svelte-15ph2c6", true);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			/*div_binding*/ ctx[28](div);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(window_1, "resize", /*resize_handler*/ ctx[25]),
    					listen(window_1, "scroll", () => {
    						scrolling = true;
    						clearTimeout(scrolling_timeout);
    						scrolling_timeout = setTimeout_1(clear_scrolling, 100);
    						/*onwindowscroll*/ ctx[26]();
    					}),
    					listen(window_1, "resize", /*onwindowresize*/ ctx[27])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*$y*/ 16 && !scrolling) {
    				scrolling = true;
    				clearTimeout(scrolling_timeout);
    				scrollTo_1(window_1.pageXOffset, /*$y*/ ctx[4]);
    				scrolling_timeout = setTimeout_1(clear_scrolling, 100);
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 8388608) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[23], dirty, null, null);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12],
    				(!current || dirty & /*$$restProps*/ 4096 && div_class_value !== (div_class_value = "parallax-container " + (/*$$restProps*/ ctx[12].class
    				? /*$$restProps*/ ctx[12].class
    				: ""))) && { class: div_class_value },
    				(!current || dirty & /*$height, sections, $$restProps*/ 4099 && div_style_value !== (div_style_value = "\n    height: " + /*$height*/ ctx[1] * /*sections*/ ctx[0] + "px;\n    " + (/*$$restProps*/ ctx[12].style
    				? /*$$restProps*/ ctx[12].style
    				: "") + ";\n  ")) && { style: div_style_value }
    			]));

    			toggle_class(div, "svelte-15ph2c6", true);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    			/*div_binding*/ ctx[28](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"sections","sectionHeight","config","threshold","onProgress","onScroll","disabled","scrollTo"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $scrollTop;
    	let $height;
    	let $progress;
    	let $layers;
    	let $top;
    	let $y;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let container;

    	// bind:innerHeight
    	let innerHeight;

    	let { sections = 1 } = $$props;
    	let { sectionHeight = undefined } = $$props;
    	let { config = { stiffness: 0.017, damping: 0.26 } } = $$props;
    	let { threshold = { top: 1, bottom: 1 } } = $$props;
    	let { onProgress = undefined } = $$props;
    	let { onScroll = undefined } = $$props;
    	let { disabled = false } = $$props;

    	// bind:scrollY
    	const y = writable(0);

    	component_subscribe($$self, y, value => $$invalidate(4, $y = value));

    	// top coord of Parallax container
    	const top = writable(0);

    	component_subscribe($$self, top, value => $$invalidate(29, $top = value));

    	// height of a section
    	const height = writable(0);

    	component_subscribe($$self, height, value => $$invalidate(1, $height = value));

    	// spring store to hold scroll progress
    	const progress = spring(undefined, { ...config, precision: 0.001 });

    	component_subscribe($$self, progress, value => $$invalidate(21, $progress = value));

    	// fake intersection observer
    	const scrollTop = derived([y, top, height], ([$y, $top, $height], set) => {
    		const dy = $y - $top;
    		const min = 0 - $height + $height * threshold.top;
    		const max = $height * sections - $height * threshold.bottom;
    		const step = clamp(dy, min, max);
    		set(step);
    	});

    	component_subscribe($$self, scrollTop, value => $$invalidate(20, $scrollTop = value));

    	const setProgress = (scrollTop, height) => {
    		if (height === 0) {
    			progress.set(0);
    			return;
    		}

    		const scrollHeight = height * sections - height;
    		progress.set(clamp(scrollTop / scrollHeight, 0, 1));
    	};

    	// eventually filled with ParallaxLayer objects
    	const layers = writableSet(new Set());

    	component_subscribe($$self, layers, value => $$invalidate(22, $layers = value));

    	setContext(contextKey, {
    		config,
    		addLayer: layer => {
    			layers.add(layer);
    		},
    		removeLayer: layer => {
    			layers.delete(layer);
    		}
    	});

    	onMount(() => {
    		setDimensions();
    	});

    	const setDimensions = () => {
    		height.set(sectionHeight ? sectionHeight : innerHeight);
    		top.set(container.getBoundingClientRect().top + window.pageYOffset);
    	};

    	function scrollTo$1(section, { selector = "", duration = 500, easing = quadInOut } = {}) {
    		const scrollTarget = $top + $height * (section - 1);

    		const focusTarget = () => {
    			document.querySelector(selector).focus({ preventScroll: true });
    		};

    		// don't animate scroll if disabled
    		if (disabled) {
    			window.scrollTo({ top: scrollTarget });
    			selector && focusTarget();
    			return;
    		}

    		scrollTo({
    			y: scrollTarget,
    			duration,
    			easing,
    			onDone: selector
    			? focusTarget
    			: () => {
    					
    				}
    		});
    	}

    	const resize_handler = () => setTimeout(setDimensions, 0);

    	function onwindowscroll() {
    		y.set($y = window_1.pageYOffset);
    	}

    	function onwindowresize() {
    		$$invalidate(3, innerHeight = window_1.innerHeight);
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			container = $$value;
    			$$invalidate(2, container);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ("sections" in $$new_props) $$invalidate(0, sections = $$new_props.sections);
    		if ("sectionHeight" in $$new_props) $$invalidate(13, sectionHeight = $$new_props.sectionHeight);
    		if ("config" in $$new_props) $$invalidate(14, config = $$new_props.config);
    		if ("threshold" in $$new_props) $$invalidate(15, threshold = $$new_props.threshold);
    		if ("onProgress" in $$new_props) $$invalidate(16, onProgress = $$new_props.onProgress);
    		if ("onScroll" in $$new_props) $$invalidate(17, onScroll = $$new_props.onScroll);
    		if ("disabled" in $$new_props) $$invalidate(18, disabled = $$new_props.disabled);
    		if ("$$scope" in $$new_props) $$invalidate(23, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*onScroll, $scrollTop*/ 1179648) {
    			if (onScroll) onScroll($scrollTop);
    		}

    		if ($$self.$$.dirty & /*onProgress, $scrollTop, $height*/ 1114114) {
    			if (onProgress) setProgress($scrollTop, $height);
    		}

    		if ($$self.$$.dirty & /*onProgress, $progress*/ 2162688) {
    			if (onProgress) onProgress($progress ?? 0);
    		}

    		if ($$self.$$.dirty & /*$layers, $height*/ 4194306) {
    			// update ParallaxLayers from parent
    			$layers.forEach(layer => {
    				layer.setHeight($height);
    			});
    		}

    		if ($$self.$$.dirty & /*$layers, $scrollTop, $height, disabled*/ 5505026) {
    			$layers.forEach(layer => {
    				layer.setPosition($scrollTop, $height, disabled);
    			});
    		}

    		if ($$self.$$.dirty & /*$height, sectionHeight*/ 8194) {
    			if ($height !== 0) (setDimensions());
    		}
    	};

    	return [
    		sections,
    		$height,
    		container,
    		innerHeight,
    		$y,
    		y,
    		top,
    		height,
    		progress,
    		scrollTop,
    		layers,
    		setDimensions,
    		$$restProps,
    		sectionHeight,
    		config,
    		threshold,
    		onProgress,
    		onScroll,
    		disabled,
    		scrollTo$1,
    		$scrollTop,
    		$progress,
    		$layers,
    		$$scope,
    		slots,
    		resize_handler,
    		onwindowscroll,
    		onwindowresize,
    		div_binding
    	];
    }

    class Parallax extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document_1.getElementById("svelte-15ph2c6-style")) add_css$2();

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			sections: 0,
    			sectionHeight: 13,
    			config: 14,
    			threshold: 15,
    			onProgress: 16,
    			onScroll: 17,
    			disabled: 18,
    			scrollTo: 19
    		});
    	}

    	get scrollTo() {
    		return this.$$.ctx[19];
    	}
    }

    /* src/ParallaxLayer.svelte generated by Svelte v3.35.0 */

    function add_css$1() {
    	var style = element("style");
    	style.id = "svelte-qcp0z5-style";
    	style.textContent = ".parallax-layer.svelte-qcp0z5{width:100%;position:absolute;box-sizing:border-box}";
    	append(document.head, style);
    }

    const get_default_slot_changes$1 = dirty => ({ progress: dirty & /*$progress*/ 1 });
    const get_default_slot_context$1 = ctx => ({ progress: /*$progress*/ ctx[0] });

    function create_fragment$1(ctx) {
    	let div;
    	let div_class_value;
    	let div_style_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], get_default_slot_context$1);

    	let div_levels = [
    		/*$$restProps*/ ctx[5],
    		{
    			class: div_class_value = "parallax-layer " + (/*$$restProps*/ ctx[5].class
    			? /*$$restProps*/ ctx[5].class
    			: "")
    		},
    		{
    			style: div_style_value = "\n    " + (/*$$restProps*/ ctx[5].style
    			? /*$$restProps*/ ctx[5].style
    			: "") + ";\n    height: " + /*height*/ ctx[1] + "px;\n    -ms-transform: " + /*translate*/ ctx[2] + ";\n    -webkit-transform: " + /*translate*/ ctx[2] + ";\n    transform: " + /*translate*/ ctx[2] + ";\n  "
    		}
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			toggle_class(div, "svelte-qcp0z5", true);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, $progress*/ 2049) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_default_slot_changes$1, get_default_slot_context$1);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
    				(!current || dirty & /*$$restProps*/ 32 && div_class_value !== (div_class_value = "parallax-layer " + (/*$$restProps*/ ctx[5].class
    				? /*$$restProps*/ ctx[5].class
    				: ""))) && { class: div_class_value },
    				(!current || dirty & /*$$restProps, height, translate*/ 38 && div_style_value !== (div_style_value = "\n    " + (/*$$restProps*/ ctx[5].style
    				? /*$$restProps*/ ctx[5].style
    				: "") + ";\n    height: " + /*height*/ ctx[1] + "px;\n    -ms-transform: " + /*translate*/ ctx[2] + ";\n    -webkit-transform: " + /*translate*/ ctx[2] + ";\n    transform: " + /*translate*/ ctx[2] + ";\n  ")) && { style: div_style_value }
    			]));

    			toggle_class(div, "svelte-qcp0z5", true);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let translate;
    	const omit_props_names = ["rate","offset","span","onProgress"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $coord;
    	let $progress;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { rate = 0.5 } = $$props;
    	let { offset = 0 } = $$props;
    	let { span = 1 } = $$props;
    	let { onProgress = undefined } = $$props;

    	// get context from Parallax
    	const { config, addLayer, removeLayer } = getContext(contextKey);

    	// spring store to hold changing scroll coordinate
    	const coord = spring(undefined, config);

    	component_subscribe($$self, coord, value => $$invalidate(10, $coord = value));

    	// and one to hold intersecting progress
    	const progress = spring(undefined, { ...config, precision: 0.001 });

    	component_subscribe($$self, progress, value => $$invalidate(0, $progress = value));

    	// layer height
    	let height;

    	const layer = {
    		setPosition: (scrollTop, sectionHeight, disabled) => {
    			if (disabled) {
    				coord.set(offset * sectionHeight, { hard: true });
    				return;
    			}

    			// amount to scroll before layer is at target position
    			const targetScroll = Math.floor(offset) * sectionHeight;

    			// distance to target position
    			const distance = offset * sectionHeight + targetScroll * rate;

    			coord.set(-(scrollTop * rate) + distance);
    			progress.set(getProgress(scrollTop, rate, distance, sectionHeight));
    		},
    		setHeight: sectionHeight => {
    			$$invalidate(1, height = span * sectionHeight);
    		}
    	};

    	const getProgress = (scrollTop, rate, distance, sectionHeight) => {
    		const apparentRate = rate + 1;
    		const halfWay = distance / apparentRate;
    		const direction = rate >= 0 ? 1 : -1;
    		const scrollDistance = sectionHeight / apparentRate * direction;
    		const start = halfWay - scrollDistance;
    		const end = halfWay + scrollDistance * span;
    		const progress = (scrollTop - start) / (end - start);
    		return clamp(progress, 0, 1);
    	};

    	onMount(() => {
    		// register layer with parent
    		addLayer(layer);

    		return () => {
    			// clean up
    			removeLayer(layer);
    		};
    	});

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ("rate" in $$new_props) $$invalidate(6, rate = $$new_props.rate);
    		if ("offset" in $$new_props) $$invalidate(7, offset = $$new_props.offset);
    		if ("span" in $$new_props) $$invalidate(8, span = $$new_props.span);
    		if ("onProgress" in $$new_props) $$invalidate(9, onProgress = $$new_props.onProgress);
    		if ("$$scope" in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$coord*/ 1024) {
    			// translate layer according to coordinate
    			$$invalidate(2, translate = `translate3d(0px, ${$coord}px, 0px);`);
    		}

    		if ($$self.$$.dirty & /*onProgress, $progress*/ 513) {
    			if (onProgress) onProgress($progress ?? 0);
    		}
    	};

    	return [
    		$progress,
    		height,
    		translate,
    		coord,
    		progress,
    		$$restProps,
    		rate,
    		offset,
    		span,
    		onProgress,
    		$coord,
    		$$scope,
    		slots
    	];
    }

    class ParallaxLayer extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-qcp0z5-style")) add_css$1();

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			rate: 6,
    			offset: 7,
    			span: 8,
    			onProgress: 9
    		});
    	}
    }

    /* src/StickyLayer.svelte generated by Svelte v3.35.0 */

    function add_css() {
    	var style = element("style");
    	style.id = "svelte-1t1wv58-style";
    	style.textContent = ".sticky-layer.svelte-1t1wv58{width:100%;top:0;left:0;box-sizing:border-box}";
    	append(document.head, style);
    }

    const get_default_slot_changes = dirty => ({ progress: dirty & /*$progress*/ 1 });
    const get_default_slot_context = ctx => ({ progress: /*$progress*/ ctx[0] });

    function create_fragment(ctx) {
    	let div;
    	let div_class_value;
    	let div_style_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context);

    	let div_levels = [
    		/*$$restProps*/ ctx[5],
    		{
    			class: div_class_value = "sticky-layer " + (/*$$restProps*/ ctx[5].class
    			? /*$$restProps*/ ctx[5].class
    			: "")
    		},
    		{
    			style: div_style_value = "\n    " + (/*$$restProps*/ ctx[5].style
    			? /*$$restProps*/ ctx[5].style
    			: "") + ";\n    position: " + /*position*/ ctx[2] + ";\n    height: " + /*height*/ ctx[1] + "px;\n    -ms-transform: " + /*translate*/ ctx[3] + "\n    -webkit-transform: " + /*translate*/ ctx[3] + "\n    transform: " + /*translate*/ ctx[3] + "\n  "
    		}
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	return {
    		c() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			toggle_class(div, "svelte-1t1wv58", true);
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, $progress*/ 1025) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
    				(!current || dirty & /*$$restProps*/ 32 && div_class_value !== (div_class_value = "sticky-layer " + (/*$$restProps*/ ctx[5].class
    				? /*$$restProps*/ ctx[5].class
    				: ""))) && { class: div_class_value },
    				(!current || dirty & /*$$restProps, position, height, translate*/ 46 && div_style_value !== (div_style_value = "\n    " + (/*$$restProps*/ ctx[5].style
    				? /*$$restProps*/ ctx[5].style
    				: "") + ";\n    position: " + /*position*/ ctx[2] + ";\n    height: " + /*height*/ ctx[1] + "px;\n    -ms-transform: " + /*translate*/ ctx[3] + "\n    -webkit-transform: " + /*translate*/ ctx[3] + "\n    transform: " + /*translate*/ ctx[3] + "\n  ")) && { style: div_style_value }
    			]));

    			toggle_class(div, "svelte-1t1wv58", true);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let position;
    	let translate;
    	const omit_props_names = ["offset","onProgress"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $progress;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { offset = { top: 0, bottom: 0 } } = $$props;
    	let { onProgress = undefined } = $$props;

    	// get context from Parallax
    	const { config, addLayer, removeLayer } = getContext(contextKey);

    	// if layer should stick
    	let isSticky = false;

    	// top coordinate of layer
    	let coord = 0;

    	// layer height
    	let height;

    	// spring store to hold progress value
    	const progress = spring(0, { ...config, precision: 0.001 });

    	component_subscribe($$self, progress, value => $$invalidate(0, $progress = value));

    	const layer = {
    		setPosition: (scrollTop, sectionHeight, disabled) => {
    			if (disabled) {
    				$$invalidate(8, isSticky = false);
    				$$invalidate(9, coord = sectionHeight * offset.top);
    				return;
    			}

    			const start = sectionHeight * offset.top;
    			const end = sectionHeight * (offset.bottom || offset.top + 1);
    			$$invalidate(8, isSticky = getSticky(scrollTop, start, end));
    			$$invalidate(9, coord = getCoord(scrollTop, start, end, isSticky));
    			progress.set(clamp((scrollTop - start) / (end - start), 0, 1));
    		},
    		setHeight: sectionHeight => {
    			$$invalidate(1, height = sectionHeight);
    		}
    	};

    	const getSticky = (scrollTop, start, end) => {
    		// covers an edge case where offset.top === 0
    		// and there are other elements in the DOM before
    		// the Parallax container
    		const startCondition = start === 0 ? scrollTop > start : scrollTop >= start;

    		return startCondition && scrollTop <= end;
    	};

    	const getCoord = (scrollTop, start, end, isSticky) => {
    		if (isSticky) return 0;
    		return scrollTop <= start ? start : end;
    	};

    	onMount(() => {
    		// register layer with parent
    		addLayer(layer);

    		return () => {
    			//clean up
    			removeLayer(layer);
    		};
    	});

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ("offset" in $$new_props) $$invalidate(6, offset = $$new_props.offset);
    		if ("onProgress" in $$new_props) $$invalidate(7, onProgress = $$new_props.onProgress);
    		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*isSticky*/ 256) {
    			$$invalidate(2, position = isSticky ? "fixed" : "absolute");
    		}

    		if ($$self.$$.dirty & /*coord*/ 512) {
    			$$invalidate(3, translate = `translate3d(0px, ${coord}px, 0px);`);
    		}

    		if ($$self.$$.dirty & /*onProgress, $progress*/ 129) {
    			if (onProgress) onProgress($progress ?? 0);
    		}
    	};

    	return [
    		$progress,
    		height,
    		position,
    		translate,
    		progress,
    		$$restProps,
    		offset,
    		onProgress,
    		isSticky,
    		coord,
    		$$scope,
    		slots
    	];
    }

    class StickyLayer extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-1t1wv58-style")) add_css();
    		init(this, options, instance, create_fragment, safe_not_equal, { offset: 6, onProgress: 7 });
    	}
    }

    exports.Parallax = Parallax;
    exports.ParallaxLayer = ParallaxLayer;
    exports.StickyLayer = StickyLayer;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
